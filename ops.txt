("br_table",       "makeBreakTable(s)"),
("return",         "makeReturn(s)"),
("call_indirect",  "makeCallIndirect(s, /*isReturn=*/false)"),
("return_call",    "makeCall(s, /*isReturn=*/true)"),
("return_call_indirect", "makeCallIndirect(s, /*isReturn=*/true)"),
("select",         "makeSelect(s)"),
("global.set",     "makeGlobalSet(s)"),
("memory.init",    "makeMemoryInit(s)"),
("data.drop",      "makeDataDrop(s)"),
("memory.copy",    "makeMemoryCopy(s)"),
("memory.fill",    "makeMemoryFill(s)"),
("memory.size",    "makeMemorySize(s)"),
("memory.grow",    "makeMemoryGrow(s)"),
# atomic instructions
("memory.atomic.notify",    "makeAtomicNotify(s)"),
("memory.atomic.wait32",    "makeAtomicWait(s, Type::i32)"),
("memory.atomic.wait64",    "makeAtomicWait(s, Type::i64)"),
("atomic.fence",            "makeAtomicFence(s)"),
("i32.atomic.load8_u",      "makeLoad(s, Type::i32, /*isAtomic=*/true)"),
("i32.atomic.load16_u",     "makeLoad(s, Type::i32, /*isAtomic=*/true)"),
("i32.atomic.load",         "makeLoad(s, Type::i32, /*isAtomic=*/true)"),
("i64.atomic.load8_u",      "makeLoad(s, Type::i64, /*isAtomic=*/true)"),
("i64.atomic.load16_u",     "makeLoad(s, Type::i64, /*isAtomic=*/true)"),
("i64.atomic.load32_u",     "makeLoad(s, Type::i64, /*isAtomic=*/true)"),
("i64.atomic.load",         "makeLoad(s, Type::i64, /*isAtomic=*/true)"),
("i32.atomic.store8",       "makeStore(s, Type::i32, /*isAtomic=*/true)"),
("i32.atomic.store16",      "makeStore(s, Type::i32, /*isAtomic=*/true)"),
("i32.atomic.store",        "makeStore(s, Type::i32, /*isAtomic=*/true)"),
("i64.atomic.store8",       "makeStore(s, Type::i64, /*isAtomic=*/true)"),
("i64.atomic.store16",      "makeStore(s, Type::i64, /*isAtomic=*/true)"),
("i64.atomic.store32",      "makeStore(s, Type::i64, /*isAtomic=*/true)"),
("i64.atomic.store",        "makeStore(s, Type::i64, /*isAtomic=*/true)"),
("i32.atomic.rmw8.add_u",   "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw16.add_u",  "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw.add",      "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i64.atomic.rmw8.add_u",   "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw16.add_u",  "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw32.add_u",  "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw.add",      "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i32.atomic.rmw8.sub_u",   "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw16.sub_u",  "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw.sub",      "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i64.atomic.rmw8.sub_u",   "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw16.sub_u",  "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw32.sub_u",  "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw.sub",      "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i32.atomic.rmw8.and_u",   "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw16.and_u",  "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw.and",      "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i64.atomic.rmw8.and_u",   "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw16.and_u",  "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw32.and_u",  "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw.and",      "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i32.atomic.rmw8.or_u",    "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw16.or_u",   "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw.or",       "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i64.atomic.rmw8.or_u",    "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw16.or_u",   "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw32.or_u",   "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw.or",       "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i32.atomic.rmw8.xor_u",   "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw16.xor_u",  "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw.xor",      "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i64.atomic.rmw8.xor_u",   "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw16.xor_u",  "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw32.xor_u",  "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw.xor",      "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i32.atomic.rmw8.xchg_u",  "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw16.xchg_u", "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw.xchg",     "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i64.atomic.rmw8.xchg_u",  "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw16.xchg_u", "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw32.xchg_u", "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw.xchg",     "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i32.atomic.rmw8.cmpxchg_u",  "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw16.cmpxchg_u", "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i32.atomic.rmw.cmpxchg",     "makeAtomicRMWOrCmpxchg(s, Type::i32)"),
("i64.atomic.rmw8.cmpxchg_u",  "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw16.cmpxchg_u", "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw32.cmpxchg_u", "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
("i64.atomic.rmw.cmpxchg",     "makeAtomicRMWOrCmpxchg(s, Type::i64)"),
# nontrapping float-to-int instructions
("i32.trunc_sat_f32_s", "makeUnary(s, UnaryOp::TruncSatSFloat32ToInt32)"),
("i32.trunc_sat_f32_u", "makeUnary(s, UnaryOp::TruncSatUFloat32ToInt32)"),
("i32.trunc_sat_f64_s", "makeUnary(s, UnaryOp::TruncSatSFloat64ToInt32)"),
("i32.trunc_sat_f64_u", "makeUnary(s, UnaryOp::TruncSatUFloat64ToInt32)"),
("i64.trunc_sat_f32_s", "makeUnary(s, UnaryOp::TruncSatSFloat32ToInt64)"),
("i64.trunc_sat_f32_u", "makeUnary(s, UnaryOp::TruncSatUFloat32ToInt64)"),
("i64.trunc_sat_f64_s", "makeUnary(s, UnaryOp::TruncSatSFloat64ToInt64)"),
("i64.trunc_sat_f64_u", "makeUnary(s, UnaryOp::TruncSatUFloat64ToInt64)"),
# SIMD ops
("v128.load",            "makeLoad(s, Type::v128, /*isAtomic=*/false)"),
("v128.store",           "makeStore(s, Type::v128, /*isAtomic=*/false)"),
("v128.const",           "makeConst(s, Type::v128)"),
("i8x16.shuffle",        "makeSIMDShuffle(s)"),
("i8x16.splat",          "makeUnary(s, UnaryOp::SplatVecI8x16)"),
("i8x16.extract_lane_s", "makeSIMDExtract(s, SIMDExtractOp::ExtractLaneSVecI8x16, 16)"),
("i8x16.extract_lane_u", "makeSIMDExtract(s, SIMDExtractOp::ExtractLaneUVecI8x16, 16)"),
("i8x16.replace_lane",   "makeSIMDReplace(s, SIMDReplaceOp::ReplaceLaneVecI8x16, 16)"),
("i16x8.splat",          "makeUnary(s, UnaryOp::SplatVecI16x8)"),
("i16x8.extract_lane_s", "makeSIMDExtract(s, SIMDExtractOp::ExtractLaneSVecI16x8, 8)"),
("i16x8.extract_lane_u", "makeSIMDExtract(s, SIMDExtractOp::ExtractLaneUVecI16x8, 8)"),
("i16x8.replace_lane",   "makeSIMDReplace(s, SIMDReplaceOp::ReplaceLaneVecI16x8, 8)"),
("i32x4.splat",          "makeUnary(s, UnaryOp::SplatVecI32x4)"),
("i32x4.extract_lane",   "makeSIMDExtract(s, SIMDExtractOp::ExtractLaneVecI32x4, 4)"),
("i32x4.replace_lane",   "makeSIMDReplace(s, SIMDReplaceOp::ReplaceLaneVecI32x4, 4)"),
("i64x2.splat",          "makeUnary(s, UnaryOp::SplatVecI64x2)"),
("i64x2.extract_lane",   "makeSIMDExtract(s, SIMDExtractOp::ExtractLaneVecI64x2, 2)"),
("i64x2.replace_lane",   "makeSIMDReplace(s, SIMDReplaceOp::ReplaceLaneVecI64x2, 2)"),
("f32x4.splat",          "makeUnary(s, UnaryOp::SplatVecF32x4)"),
("f32x4.extract_lane",   "makeSIMDExtract(s, SIMDExtractOp::ExtractLaneVecF32x4, 4)"),
("f32x4.replace_lane",   "makeSIMDReplace(s, SIMDReplaceOp::ReplaceLaneVecF32x4, 4)"),
("f64x2.splat",          "makeUnary(s, UnaryOp::SplatVecF64x2)"),
("f64x2.extract_lane",   "makeSIMDExtract(s, SIMDExtractOp::ExtractLaneVecF64x2, 2)"),
("f64x2.replace_lane",   "makeSIMDReplace(s, SIMDReplaceOp::ReplaceLaneVecF64x2, 2)"),
("i8x16.eq",             "makeBinary(s, BinaryOp::EqVecI8x16)"),
("i8x16.ne",             "makeBinary(s, BinaryOp::NeVecI8x16)"),
("i8x16.lt_s",           "makeBinary(s, BinaryOp::LtSVecI8x16)"),
("i8x16.lt_u",           "makeBinary(s, BinaryOp::LtUVecI8x16)"),
("i8x16.gt_s",           "makeBinary(s, BinaryOp::GtSVecI8x16)"),
("i8x16.gt_u",           "makeBinary(s, BinaryOp::GtUVecI8x16)"),
("i8x16.le_s",           "makeBinary(s, BinaryOp::LeSVecI8x16)"),
("i8x16.le_u",           "makeBinary(s, BinaryOp::LeUVecI8x16)"),
("i8x16.ge_s",           "makeBinary(s, BinaryOp::GeSVecI8x16)"),
("i8x16.ge_u",           "makeBinary(s, BinaryOp::GeUVecI8x16)"),
("i16x8.eq",             "makeBinary(s, BinaryOp::EqVecI16x8)"),
("i16x8.ne",             "makeBinary(s, BinaryOp::NeVecI16x8)"),
("i16x8.lt_s",           "makeBinary(s, BinaryOp::LtSVecI16x8)"),
("i16x8.lt_u",           "makeBinary(s, BinaryOp::LtUVecI16x8)"),
("i16x8.gt_s",           "makeBinary(s, BinaryOp::GtSVecI16x8)"),
("i16x8.gt_u",           "makeBinary(s, BinaryOp::GtUVecI16x8)"),
("i16x8.le_s",           "makeBinary(s, BinaryOp::LeSVecI16x8)"),
("i16x8.le_u",           "makeBinary(s, BinaryOp::LeUVecI16x8)"),
("i16x8.ge_s",           "makeBinary(s, BinaryOp::GeSVecI16x8)"),
("i16x8.ge_u",           "makeBinary(s, BinaryOp::GeUVecI16x8)"),
("i32x4.eq",             "makeBinary(s, BinaryOp::EqVecI32x4)"),
("i32x4.ne",             "makeBinary(s, BinaryOp::NeVecI32x4)"),
("i32x4.lt_s",           "makeBinary(s, BinaryOp::LtSVecI32x4)"),
("i32x4.lt_u",           "makeBinary(s, BinaryOp::LtUVecI32x4)"),
("i32x4.gt_s",           "makeBinary(s, BinaryOp::GtSVecI32x4)"),
("i32x4.gt_u",           "makeBinary(s, BinaryOp::GtUVecI32x4)"),
("i32x4.le_s",           "makeBinary(s, BinaryOp::LeSVecI32x4)"),
("i32x4.le_u",           "makeBinary(s, BinaryOp::LeUVecI32x4)"),
("i32x4.ge_s",           "makeBinary(s, BinaryOp::GeSVecI32x4)"),
("i32x4.ge_u",           "makeBinary(s, BinaryOp::GeUVecI32x4)"),
("i64x2.eq",             "makeBinary(s, BinaryOp::EqVecI64x2)"),
("i64x2.ne",             "makeBinary(s, BinaryOp::NeVecI64x2)"),
("i64x2.lt_s",           "makeBinary(s, BinaryOp::LtSVecI64x2)"),
("i64x2.gt_s",           "makeBinary(s, BinaryOp::GtSVecI64x2)"),
("i64x2.le_s",           "makeBinary(s, BinaryOp::LeSVecI64x2)"),
("i64x2.ge_s",           "makeBinary(s, BinaryOp::GeSVecI64x2)"),
("f32x4.eq",             "makeBinary(s, BinaryOp::EqVecF32x4)"),
("f32x4.ne",             "makeBinary(s, BinaryOp::NeVecF32x4)"),
("f32x4.lt",             "makeBinary(s, BinaryOp::LtVecF32x4)"),
("f32x4.gt",             "makeBinary(s, BinaryOp::GtVecF32x4)"),
("f32x4.le",             "makeBinary(s, BinaryOp::LeVecF32x4)"),
("f32x4.ge",             "makeBinary(s, BinaryOp::GeVecF32x4)"),
("f64x2.eq",             "makeBinary(s, BinaryOp::EqVecF64x2)"),
("f64x2.ne",             "makeBinary(s, BinaryOp::NeVecF64x2)"),
("f64x2.lt",             "makeBinary(s, BinaryOp::LtVecF64x2)"),
("f64x2.gt",             "makeBinary(s, BinaryOp::GtVecF64x2)"),
("f64x2.le",             "makeBinary(s, BinaryOp::LeVecF64x2)"),
("f64x2.ge",             "makeBinary(s, BinaryOp::GeVecF64x2)"),
("v128.not",             "makeUnary(s, UnaryOp::NotVec128)"),
("v128.and",             "makeBinary(s, BinaryOp::AndVec128)"),
("v128.or",              "makeBinary(s, BinaryOp::OrVec128)"),
("v128.xor",             "makeBinary(s, BinaryOp::XorVec128)"),
("v128.andnot",          "makeBinary(s, BinaryOp::AndNotVec128)"),
("v128.any_true",        "makeUnary(s, UnaryOp::AnyTrueVec128)"),
("v128.bitselect",       "makeSIMDTernary(s, SIMDTernaryOp::Bitselect)"),
("v128.load8_lane",      "makeSIMDLoadStoreLane(s, SIMDLoadStoreLaneOp::Load8LaneVec128)"),
("v128.load16_lane",     "makeSIMDLoadStoreLane(s, SIMDLoadStoreLaneOp::Load16LaneVec128)"),
("v128.load32_lane",     "makeSIMDLoadStoreLane(s, SIMDLoadStoreLaneOp::Load32LaneVec128)"),
("v128.load64_lane",     "makeSIMDLoadStoreLane(s, SIMDLoadStoreLaneOp::Load64LaneVec128)"),
("v128.store8_lane",     "makeSIMDLoadStoreLane(s, SIMDLoadStoreLaneOp::Store8LaneVec128)"),
("v128.store16_lane",    "makeSIMDLoadStoreLane(s, SIMDLoadStoreLaneOp::Store16LaneVec128)"),
("v128.store32_lane",    "makeSIMDLoadStoreLane(s, SIMDLoadStoreLaneOp::Store32LaneVec128)"),
("v128.store64_lane",    "makeSIMDLoadStoreLane(s, SIMDLoadStoreLaneOp::Store64LaneVec128)"),
("i8x16.popcnt",         "makeUnary(s, UnaryOp::PopcntVecI8x16)"),
("i8x16.abs",            "makeUnary(s, UnaryOp::AbsVecI8x16)"),
("i8x16.neg",            "makeUnary(s, UnaryOp::NegVecI8x16)"),
("i8x16.all_true",       "makeUnary(s, UnaryOp::AllTrueVecI8x16)"),
("i8x16.bitmask",        "makeUnary(s, UnaryOp::BitmaskVecI8x16)"),
("i8x16.shl",            "makeSIMDShift(s, SIMDShiftOp::ShlVecI8x16)"),
("i8x16.shr_s",          "makeSIMDShift(s, SIMDShiftOp::ShrSVecI8x16)"),
("i8x16.shr_u",          "makeSIMDShift(s, SIMDShiftOp::ShrUVecI8x16)"),
("i8x16.add",            "makeBinary(s, BinaryOp::AddVecI8x16)"),
("i8x16.add_sat_s",      "makeBinary(s, BinaryOp::AddSatSVecI8x16)"),
("i8x16.add_sat_u",      "makeBinary(s, BinaryOp::AddSatUVecI8x16)"),
("i8x16.sub",            "makeBinary(s, BinaryOp::SubVecI8x16)"),
("i8x16.sub_sat_s",      "makeBinary(s, BinaryOp::SubSatSVecI8x16)"),
("i8x16.sub_sat_u",      "makeBinary(s, BinaryOp::SubSatUVecI8x16)"),
("i8x16.min_s",          "makeBinary(s, BinaryOp::MinSVecI8x16)"),
("i8x16.min_u",          "makeBinary(s, BinaryOp::MinUVecI8x16)"),
("i8x16.max_s",          "makeBinary(s, BinaryOp::MaxSVecI8x16)"),
("i8x16.max_u",          "makeBinary(s, BinaryOp::MaxUVecI8x16)"),
("i8x16.avgr_u",         "makeBinary(s, BinaryOp::AvgrUVecI8x16)"),
("i16x8.abs",            "makeUnary(s, UnaryOp::AbsVecI16x8)"),
("i16x8.neg",            "makeUnary(s, UnaryOp::NegVecI16x8)"),
("i16x8.all_true",       "makeUnary(s, UnaryOp::AllTrueVecI16x8)"),
("i16x8.bitmask",        "makeUnary(s, UnaryOp::BitmaskVecI16x8)"),
("i16x8.shl",            "makeSIMDShift(s, SIMDShiftOp::ShlVecI16x8)"),
("i16x8.shr_s",          "makeSIMDShift(s, SIMDShiftOp::ShrSVecI16x8)"),
("i16x8.shr_u",          "makeSIMDShift(s, SIMDShiftOp::ShrUVecI16x8)"),
("i16x8.add",            "makeBinary(s, BinaryOp::AddVecI16x8)"),
("i16x8.add_sat_s",      "makeBinary(s, BinaryOp::AddSatSVecI16x8)"),
("i16x8.add_sat_u",      "makeBinary(s, BinaryOp::AddSatUVecI16x8)"),
("i16x8.sub",            "makeBinary(s, BinaryOp::SubVecI16x8)"),
("i16x8.sub_sat_s",      "makeBinary(s, BinaryOp::SubSatSVecI16x8)"),
("i16x8.sub_sat_u",      "makeBinary(s, BinaryOp::SubSatUVecI16x8)"),
("i16x8.mul",            "makeBinary(s, BinaryOp::MulVecI16x8)"),
("i16x8.min_s",          "makeBinary(s, BinaryOp::MinSVecI16x8)"),
("i16x8.min_u",          "makeBinary(s, BinaryOp::MinUVecI16x8)"),
("i16x8.max_s",          "makeBinary(s, BinaryOp::MaxSVecI16x8)"),
("i16x8.max_u",          "makeBinary(s, BinaryOp::MaxUVecI16x8)"),
("i16x8.avgr_u",         "makeBinary(s, BinaryOp::AvgrUVecI16x8)"),
("i16x8.q15mulr_sat_s",  "makeBinary(s, BinaryOp::Q15MulrSatSVecI16x8)"),
("i16x8.extmul_low_i8x16_s", "makeBinary(s, BinaryOp::ExtMulLowSVecI16x8)"),
("i16x8.extmul_high_i8x16_s", "makeBinary(s, BinaryOp::ExtMulHighSVecI16x8)"),
("i16x8.extmul_low_i8x16_u", "makeBinary(s, BinaryOp::ExtMulLowUVecI16x8)"),
("i16x8.extmul_high_i8x16_u", "makeBinary(s, BinaryOp::ExtMulHighUVecI16x8)"),
("i32x4.abs",            "makeUnary(s, UnaryOp::AbsVecI32x4)"),
("i32x4.neg",            "makeUnary(s, UnaryOp::NegVecI32x4)"),
("i32x4.all_true",       "makeUnary(s, UnaryOp::AllTrueVecI32x4)"),
("i32x4.bitmask",        "makeUnary(s, UnaryOp::BitmaskVecI32x4)"),
("i32x4.shl",            "makeSIMDShift(s, SIMDShiftOp::ShlVecI32x4)"),
("i32x4.shr_s",          "makeSIMDShift(s, SIMDShiftOp::ShrSVecI32x4)"),
("i32x4.shr_u",          "makeSIMDShift(s, SIMDShiftOp::ShrUVecI32x4)"),
("i32x4.add",            "makeBinary(s, BinaryOp::AddVecI32x4)"),
("i32x4.sub",            "makeBinary(s, BinaryOp::SubVecI32x4)"),
("i32x4.mul",            "makeBinary(s, BinaryOp::MulVecI32x4)"),
("i32x4.min_s",          "makeBinary(s, BinaryOp::MinSVecI32x4)"),
("i32x4.min_u",          "makeBinary(s, BinaryOp::MinUVecI32x4)"),
("i32x4.max_s",          "makeBinary(s, BinaryOp::MaxSVecI32x4)"),
("i32x4.max_u",          "makeBinary(s, BinaryOp::MaxUVecI32x4)"),
("i32x4.dot_i16x8_s",    "makeBinary(s, BinaryOp::DotSVecI16x8ToVecI32x4)"),
("i32x4.extmul_low_i16x8_s", "makeBinary(s, BinaryOp::ExtMulLowSVecI32x4)"),
("i32x4.extmul_high_i16x8_s", "makeBinary(s, BinaryOp::ExtMulHighSVecI32x4)"),
("i32x4.extmul_low_i16x8_u", "makeBinary(s, BinaryOp::ExtMulLowUVecI32x4)"),
("i32x4.extmul_high_i16x8_u", "makeBinary(s, BinaryOp::ExtMulHighUVecI32x4)"),
("i64x2.abs",            "makeUnary(s, UnaryOp::AbsVecI64x2)"),
("i64x2.neg",            "makeUnary(s, UnaryOp::NegVecI64x2)"),
("i64x2.all_true",       "makeUnary(s, UnaryOp::AllTrueVecI64x2)"),
("i64x2.bitmask",        "makeUnary(s, UnaryOp::BitmaskVecI64x2)"),
("i64x2.shl",            "makeSIMDShift(s, SIMDShiftOp::ShlVecI64x2)"),
("i64x2.shr_s",          "makeSIMDShift(s, SIMDShiftOp::ShrSVecI64x2)"),
("i64x2.shr_u",          "makeSIMDShift(s, SIMDShiftOp::ShrUVecI64x2)"),
("i64x2.add",            "makeBinary(s, BinaryOp::AddVecI64x2)"),
("i64x2.sub",            "makeBinary(s, BinaryOp::SubVecI64x2)"),
("i64x2.mul",            "makeBinary(s, BinaryOp::MulVecI64x2)"),
("i64x2.extmul_low_i32x4_s", "makeBinary(s, BinaryOp::ExtMulLowSVecI64x2)"),
("i64x2.extmul_high_i32x4_s", "makeBinary(s, BinaryOp::ExtMulHighSVecI64x2)"),
("i64x2.extmul_low_i32x4_u", "makeBinary(s, BinaryOp::ExtMulLowUVecI64x2)"),
("i64x2.extmul_high_i32x4_u", "makeBinary(s, BinaryOp::ExtMulHighUVecI64x2)"),
("f32x4.abs",            "makeUnary(s, UnaryOp::AbsVecF32x4)"),
("f32x4.neg",            "makeUnary(s, UnaryOp::NegVecF32x4)"),
("f32x4.sqrt",           "makeUnary(s, UnaryOp::SqrtVecF32x4)"),
("f32x4.add",            "makeBinary(s, BinaryOp::AddVecF32x4)"),
("f32x4.sub",            "makeBinary(s, BinaryOp::SubVecF32x4)"),
("f32x4.mul",            "makeBinary(s, BinaryOp::MulVecF32x4)"),
("f32x4.div",            "makeBinary(s, BinaryOp::DivVecF32x4)"),
("f32x4.min",            "makeBinary(s, BinaryOp::MinVecF32x4)"),
("f32x4.max",            "makeBinary(s, BinaryOp::MaxVecF32x4)"),
("f32x4.pmin",           "makeBinary(s, BinaryOp::PMinVecF32x4)"),
("f32x4.pmax",           "makeBinary(s, BinaryOp::PMaxVecF32x4)"),
("f32x4.ceil",           "makeUnary(s, UnaryOp::CeilVecF32x4)"),
("f32x4.floor",          "makeUnary(s, UnaryOp::FloorVecF32x4)"),
("f32x4.trunc",          "makeUnary(s, UnaryOp::TruncVecF32x4)"),
("f32x4.nearest",        "makeUnary(s, UnaryOp::NearestVecF32x4)"),
("f64x2.abs",            "makeUnary(s, UnaryOp::AbsVecF64x2)"),
("f64x2.neg",            "makeUnary(s, UnaryOp::NegVecF64x2)"),
("f64x2.sqrt",           "makeUnary(s, UnaryOp::SqrtVecF64x2)"),
("f64x2.add",            "makeBinary(s, BinaryOp::AddVecF64x2)"),
("f64x2.sub",            "makeBinary(s, BinaryOp::SubVecF64x2)"),
("f64x2.mul",            "makeBinary(s, BinaryOp::MulVecF64x2)"),
("f64x2.div",            "makeBinary(s, BinaryOp::DivVecF64x2)"),
("f64x2.min",            "makeBinary(s, BinaryOp::MinVecF64x2)"),
("f64x2.max",            "makeBinary(s, BinaryOp::MaxVecF64x2)"),
("f64x2.pmin",           "makeBinary(s, BinaryOp::PMinVecF64x2)"),
("f64x2.pmax",           "makeBinary(s, BinaryOp::PMaxVecF64x2)"),
("f64x2.ceil",           "makeUnary(s, UnaryOp::CeilVecF64x2)"),
("f64x2.floor",          "makeUnary(s, UnaryOp::FloorVecF64x2)"),
("f64x2.trunc",          "makeUnary(s, UnaryOp::TruncVecF64x2)"),
("f64x2.nearest",        "makeUnary(s, UnaryOp::NearestVecF64x2)"),
("i32x4.trunc_sat_f32x4_s",  "makeUnary(s, UnaryOp::TruncSatSVecF32x4ToVecI32x4)"),
("i32x4.trunc_sat_f32x4_u",  "makeUnary(s, UnaryOp::TruncSatUVecF32x4ToVecI32x4)"),
("f32x4.convert_i32x4_s",    "makeUnary(s, UnaryOp::ConvertSVecI32x4ToVecF32x4)"),
("f32x4.convert_i32x4_u",    "makeUnary(s, UnaryOp::ConvertUVecI32x4ToVecF32x4)"),
("v128.load8_splat",         "makeSIMDLoad(s, SIMDLoadOp::Load8SplatVec128)"),
("v128.load16_splat",        "makeSIMDLoad(s, SIMDLoadOp::Load16SplatVec128)"),
("v128.load32_splat",        "makeSIMDLoad(s, SIMDLoadOp::Load32SplatVec128)"),
("v128.load64_splat",        "makeSIMDLoad(s, SIMDLoadOp::Load64SplatVec128)"),
("v128.load8x8_s",           "makeSIMDLoad(s, SIMDLoadOp::Load8x8SVec128)"),
("v128.load8x8_u",           "makeSIMDLoad(s, SIMDLoadOp::Load8x8UVec128)"),
("v128.load16x4_s",          "makeSIMDLoad(s, SIMDLoadOp::Load16x4SVec128)"),
("v128.load16x4_u",          "makeSIMDLoad(s, SIMDLoadOp::Load16x4UVec128)"),
("v128.load32x2_s",          "makeSIMDLoad(s, SIMDLoadOp::Load32x2SVec128)"),
("v128.load32x2_u",          "makeSIMDLoad(s, SIMDLoadOp::Load32x2UVec128)"),
("v128.load32_zero",         "makeSIMDLoad(s, SIMDLoadOp::Load32ZeroVec128)"),
("v128.load64_zero",         "makeSIMDLoad(s, SIMDLoadOp::Load64ZeroVec128)"),
("i8x16.narrow_i16x8_s",     "makeBinary(s, BinaryOp::NarrowSVecI16x8ToVecI8x16)"),
("i8x16.narrow_i16x8_u",     "makeBinary(s, BinaryOp::NarrowUVecI16x8ToVecI8x16)"),
("i16x8.narrow_i32x4_s",     "makeBinary(s, BinaryOp::NarrowSVecI32x4ToVecI16x8)"),
("i16x8.narrow_i32x4_u",     "makeBinary(s, BinaryOp::NarrowUVecI32x4ToVecI16x8)"),
("i16x8.extend_low_i8x16_s",  "makeUnary(s, UnaryOp::ExtendLowSVecI8x16ToVecI16x8)"),
("i16x8.extend_high_i8x16_s", "makeUnary(s, UnaryOp::ExtendHighSVecI8x16ToVecI16x8)"),
("i16x8.extend_low_i8x16_u",  "makeUnary(s, UnaryOp::ExtendLowUVecI8x16ToVecI16x8)"),
("i16x8.extend_high_i8x16_u", "makeUnary(s, UnaryOp::ExtendHighUVecI8x16ToVecI16x8)"),
("i32x4.extend_low_i16x8_s",  "makeUnary(s, UnaryOp::ExtendLowSVecI16x8ToVecI32x4)"),
("i32x4.extend_high_i16x8_s", "makeUnary(s, UnaryOp::ExtendHighSVecI16x8ToVecI32x4)"),
("i32x4.extend_low_i16x8_u",  "makeUnary(s, UnaryOp::ExtendLowUVecI16x8ToVecI32x4)"),
("i32x4.extend_high_i16x8_u", "makeUnary(s, UnaryOp::ExtendHighUVecI16x8ToVecI32x4)"),
("i64x2.extend_low_i32x4_s",  "makeUnary(s, UnaryOp::ExtendLowSVecI32x4ToVecI64x2)"),
("i64x2.extend_high_i32x4_s", "makeUnary(s, UnaryOp::ExtendHighSVecI32x4ToVecI64x2)"),
("i64x2.extend_low_i32x4_u",  "makeUnary(s, UnaryOp::ExtendLowUVecI32x4ToVecI64x2)"),
("i64x2.extend_high_i32x4_u", "makeUnary(s, UnaryOp::ExtendHighUVecI32x4ToVecI64x2)"),
("i8x16.swizzle",             "makeBinary(s, BinaryOp::SwizzleVec8x16)"),
("i16x8.extadd_pairwise_i8x16_s", "makeUnary(s, UnaryOp::ExtAddPairwiseSVecI8x16ToI16x8)"),
("i16x8.extadd_pairwise_i8x16_u", "makeUnary(s, UnaryOp::ExtAddPairwiseUVecI8x16ToI16x8)"),
("i32x4.extadd_pairwise_i16x8_s", "makeUnary(s, UnaryOp::ExtAddPairwiseSVecI16x8ToI32x4)"),
("i32x4.extadd_pairwise_i16x8_u", "makeUnary(s, UnaryOp::ExtAddPairwiseUVecI16x8ToI32x4)"),
("f64x2.convert_low_i32x4_s",     "makeUnary(s, UnaryOp::ConvertLowSVecI32x4ToVecF64x2)"),
("f64x2.convert_low_i32x4_u",     "makeUnary(s, UnaryOp::ConvertLowUVecI32x4ToVecF64x2)"),
("i32x4.trunc_sat_f64x2_s_zero",  "makeUnary(s, UnaryOp::TruncSatZeroSVecF64x2ToVecI32x4)"),
("i32x4.trunc_sat_f64x2_u_zero",  "makeUnary(s, UnaryOp::TruncSatZeroUVecF64x2ToVecI32x4)"),
("f32x4.demote_f64x2_zero",       "makeUnary(s, UnaryOp::DemoteZeroVecF64x2ToVecF32x4)"),
("f64x2.promote_low_f32x4",       "makeUnary(s, UnaryOp::PromoteLowVecF32x4ToVecF64x2)"),

# relaxed SIMD ops
("i8x16.relaxed_swizzle", "makeBinary(s, BinaryOp::RelaxedSwizzleVec8x16)"),
("i32x4.relaxed_trunc_f32x4_s", "makeUnary(s, UnaryOp::RelaxedTruncSVecF32x4ToVecI32x4)"),
("i32x4.relaxed_trunc_f32x4_u", "makeUnary(s, UnaryOp::RelaxedTruncUVecF32x4ToVecI32x4)"),
("i32x4.relaxed_trunc_f64x2_s_zero", "makeUnary(s, UnaryOp::RelaxedTruncZeroSVecF64x2ToVecI32x4)"),
("i32x4.relaxed_trunc_f64x2_u_zero", "makeUnary(s, UnaryOp::RelaxedTruncZeroUVecF64x2ToVecI32x4)"),
("f32x4.relaxed_fma", "makeSIMDTernary(s, SIMDTernaryOp::RelaxedFmaVecF32x4)"),
("f32x4.relaxed_fms", "makeSIMDTernary(s, SIMDTernaryOp::RelaxedFmsVecF32x4)"),
("f64x2.relaxed_fma", "makeSIMDTernary(s, SIMDTernaryOp::RelaxedFmaVecF64x2)"),
("f64x2.relaxed_fms", "makeSIMDTernary(s, SIMDTernaryOp::RelaxedFmsVecF64x2)"),
("i8x16.laneselect", "makeSIMDTernary(s, SIMDTernaryOp::LaneselectI8x16)"),
("i16x8.laneselect", "makeSIMDTernary(s, SIMDTernaryOp::LaneselectI16x8)"),
("i32x4.laneselect", "makeSIMDTernary(s, SIMDTernaryOp::LaneselectI32x4)"),
("i64x2.laneselect", "makeSIMDTernary(s, SIMDTernaryOp::LaneselectI64x2)"),
("f32x4.relaxed_min", "makeBinary(s, BinaryOp::RelaxedMinVecF32x4)"),
("f32x4.relaxed_max", "makeBinary(s, BinaryOp::RelaxedMaxVecF32x4)"),
("f64x2.relaxed_min", "makeBinary(s, BinaryOp::RelaxedMinVecF64x2)"),
("f64x2.relaxed_max", "makeBinary(s, BinaryOp::RelaxedMaxVecF64x2)"),

# reference types instructions
("ref.null",             "makeRefNull(s)"),
("ref.is_null",          "makeRefIs(s, RefIsNull)"),
("ref.func",             "makeRefFunc(s)"),
("ref.eq",               "makeRefEq(s)"),
# table instructions
("table.get",            "makeTableGet(s)"),
("table.set",            "makeTableSet(s)"),
("table.size",           "makeTableSize(s)"),
("table.grow",           "makeTableGrow(s)"),
# TODO:
# table.init
# table.fill
# table.copy
#
# exception handling instructions
("try",                  "makeTry(s)"),
("throw",                "makeThrow(s)"),
("rethrow",              "makeRethrow(s)"),
# Multivalue pseudoinstructions
("tuple.make",           "makeTupleMake(s)"),
("tuple.extract",        "makeTupleExtract(s)"),
("pop",                  "makePop(s)"),
# Typed function references instructions
("call_ref",             "makeCallRef(s, /*isReturn=*/false)"),
("return_call_ref",      "makeCallRef(s, /*isReturn=*/true)"),
# GC
("i31.new",              "makeI31New(s)"),
("i31.get_s",            "makeI31Get(s, true)"),
("i31.get_u",            "makeI31Get(s, false)"),
("ref.test",             "makeRefTest(s)"),
("ref.test_static",      "makeRefTestStatic(s)"),
("ref.cast",             "makeRefCast(s)"),
("ref.cast_static",      "makeRefCastStatic(s)"),
("br_on_null",           "makeBrOn(s, BrOnNull)"),
("br_on_non_null",       "makeBrOn(s, BrOnNonNull)"),
("br_on_cast",           "makeBrOn(s, BrOnCast)"),
("br_on_cast_static",    "makeBrOnStatic(s, BrOnCast)"),
("br_on_cast_fail",      "makeBrOn(s, BrOnCastFail)"),
("br_on_cast_static_fail", "makeBrOnStatic(s, BrOnCastFail)"),
("br_on_func",           "makeBrOn(s, BrOnFunc)"),
("br_on_non_func",       "makeBrOn(s, BrOnNonFunc)"),
("br_on_data",           "makeBrOn(s, BrOnData)"),
("br_on_non_data",       "makeBrOn(s, BrOnNonData)"),
("br_on_i31",            "makeBrOn(s, BrOnI31)"),
("br_on_non_i31",        "makeBrOn(s, BrOnNonI31)"),
("rtt.canon",            "makeRttCanon(s)"),
("rtt.sub",              "makeRttSub(s)"),
("rtt.fresh_sub",        "makeRttFreshSub(s)"),
("struct.new_with_rtt",  "makeStructNew(s, false)"),
("struct.new_default_with_rtt", "makeStructNew(s, true)"),
("struct.new",           "makeStructNewStatic(s, false)"),
("struct.new_default",   "makeStructNewStatic(s, true)"),
("struct.get",           "makeStructGet(s)"),
("struct.get_s",         "makeStructGet(s, true)"),
("struct.get_u",         "makeStructGet(s, false)"),
("struct.set",           "makeStructSet(s)"),
("array.new_with_rtt",   "makeArrayNew(s, false)"),
("array.new_default_with_rtt", "makeArrayNew(s, true)"),
("array.new",            "makeArrayNewStatic(s, false)"),
("array.new_default",    "makeArrayNewStatic(s, true)"),
("array.init",           "makeArrayInit(s)"),
("array.init_static",    "makeArrayInitStatic(s)"),
("array.get",            "makeArrayGet(s)"),
("array.get_s",          "makeArrayGet(s, true)"),
("array.get_u",          "makeArrayGet(s, false)"),
("array.set",            "makeArraySet(s)"),
("array.len",            "makeArrayLen(s)"),
("array.copy",           "makeArrayCopy(s)"),
("ref.is_func",          "makeRefIs(s, RefIsFunc)"),
("ref.is_data",          "makeRefIs(s, RefIsData)"),
("ref.is_i31",           "makeRefIs(s, RefIsI31)"),
("ref.as_non_null",      "makeRefAs(s, RefAsNonNull)"),
("ref.as_func",          "makeRefAs(s, RefAsFunc)"),
("ref.as_data",          "makeRefAs(s, RefAsData)"),
("ref.as_i31",           "makeRefAs(s, RefAsI31)"),